use super::*;
use static_cell::StaticCell;

#[test]
fn test_characteristics() {
    crate::test::init();
    let v = CharacteristicProperties::new()
        .with_read(true)
        .with_read_open(true)
        .with_hidden(true);
    assert_eq!(v.0, 0x0001 | 0x0010 | 0x0040);

    let z = CharacteristicProperties::from_bits(0x03);
    info!("0x03: {:#?}", z);
    let z = CharacteristicProperties::from_bits(0x10);
    info!("0x10: {:#?}", z);

    // b0 03
    let z = CharacteristicProperties::from_bits(u16::from_le_bytes([0xb0, 0x03]));
    info!("[0xb0, 0x03]: {:#?}", z);
}

#[gatt_server]
struct Server {
    accessory_information: AccessoryInformationService,
    protocol: ProtocolInformationService,
    pairing: PairingService,
    lightbulb: LightbulbService,
}
impl Server<'_> {
    pub fn as_hap(&self) -> HapServices<'_> {
        HapServices {
            information: &self.accessory_information,
            protocol: &self.protocol,
            pairing: &self.pairing,
        }
    }
}

#[tokio::test]
async fn test_message_exchanges() -> Result<(), InternalError> {
    crate::test::init();
    let name = "Acme Light Bulb";
    let server = Server::new_with_config(GapConfig::Peripheral(PeripheralConfig {
        name,
        appearance: &appearance::power_device::GENERIC_POWER_DEVICE,
    }))
    .unwrap();

    // Setup the accessory information.
    // https://github.com/apple/HomeKitADK/blob/fb201f98f5fdc7fef6a455054f08b59cca5d1ec8/Applications/Lightbulb/App.c#L124
    let accessory_static_data = crate::AccessoryInformationStatic {
        name,
        // Possibly device id 57:3B:20:A7:E7:C4 ?
        device_id: crate::DeviceId([0x57, 0x3b, 0x20, 0xA7, 0xE7, 0xC4]),
        firmware_revision: "1",
        hardware_revision: "1",
        manufacturer: "Acme",
        model: "LightBulb1,1",
        serial_number: "099DB48E9E28",
        ..Default::default()
    };

    let hap = server.as_hap();
    let _ = hap;

    let buffer: &mut [u8] = {
        static STATE: StaticCell<[u8; 2048]> = StaticCell::new();
        STATE.init([0u8; 2048])
    };

    struct LightBulbAccessory {
        name: HeaplessString<32>,
        bulb_on_state: bool,
    }
    impl crate::AccessoryInterface for LightBulbAccessory {
        async fn read_characteristic(
            &self,
            char_id: CharId,
        ) -> Result<impl Into<&[u8]>, InterfaceError> {
            if char_id == CHAR_ID_LIGHTBULB_NAME {
                Ok(self.name.as_bytes())
            } else if char_id == CHAR_ID_LIGHTBULB_ON {
                Ok(self.bulb_on_state.as_bytes())
            } else {
                Err(InterfaceError::CharacteristicUnknown(char_id))
            }
        }
        async fn write_characteristic(
            &mut self,
            char_id: CharId,
            data: &[u8],
        ) -> Result<CharacteristicResponse, InterfaceError> {
            info!(
                "AccessoryInterface to characterstic: 0x{:02x?} data: {:02x?}",
                char_id, data
            );

            if char_id == CHAR_ID_LIGHTBULB_ON {
                let value = data
                    .get(0)
                    .ok_or(InterfaceError::CharacteristicWriteInvalid)?;
                let val_as_bool = *value != 0;

                let response = if self.bulb_on_state != val_as_bool {
                    CharacteristicResponse::Modified
                } else {
                    CharacteristicResponse::Unmodified
                };
                self.bulb_on_state = val_as_bool;
                info!("Set bulb to: {:?}", self.bulb_on_state);
                Ok(response)
            } else {
                Err(InterfaceError::CharacteristicUnknown(char_id))
            }
        }
    }

    // https://github.com/apple/HomeKitADK/blob/fb201f98f5fdc7fef6a455054f08b59cca5d1ec8/Applications/Lightbulb/DB.c#L472
    let mut accessory = LightBulbAccessory {
        name: "Light Bulb".try_into().unwrap(),
        bulb_on_state: false,
    };

    let pair_ctx = {
        static STATE: StaticCell<crate::pairing::PairContext> = StaticCell::new();
        STATE.init_with(crate::pairing::PairContext::default)
    };
    pair_ctx.accessory = accessory_static_data;

    // We need real commissioning for this.
    // from recording 2025_08_24_1639.
    pair_ctx.info.salt = [
        0x3d, 0xc2, 0x81, 0xab, 0x08, 0xed, 0x4d, 0x8c, 0x52, 0x0c, 0xb2, 0x5f, 0xc2, 0x51, 0x9c,
        0x1f,
    ];
    pair_ctx.info.verifier = [
        0xe3, 0x7e, 0xa0, 0xd4, 0x45, 0xab, 0x91, 0xcc, 0xee, 0x92, 0x33, 0x20, 0x9e, 0xb3, 0x8f,
        0xfc, 0xd7, 0x04, 0x20, 0xd1, 0x95, 0x34, 0x73, 0x5a, 0x17, 0x2e, 0xca, 0xef, 0xe3, 0x8d,
        0x1a, 0x21, 0xfb, 0x5e, 0x2d, 0x18, 0x1b, 0xb0, 0x80, 0x77, 0x12, 0xf7, 0x2d, 0x2e, 0x64,
        0x67, 0xc7, 0xa8, 0xb5, 0xc0, 0xe3, 0xab, 0xe4, 0x60, 0x58, 0x9f, 0xde, 0x39, 0x62, 0xdc,
        0x70, 0x01, 0x42, 0x1a, 0x07, 0x47, 0x16, 0x63, 0xf7, 0xd7, 0xee, 0x9b, 0xf9, 0x7b, 0x35,
        0xc4, 0x3b, 0x5d, 0x0a, 0xd6, 0x07, 0xdb, 0x47, 0x84, 0x05, 0x22, 0x9b, 0xc8, 0x0f, 0xb3,
        0xb4, 0x39, 0xc7, 0x18, 0xc9, 0xb0, 0x85, 0x8d, 0x19, 0xf5, 0x56, 0xc6, 0xee, 0x9b, 0xd8,
        0x87, 0x8a, 0x39, 0xf9, 0x21, 0x35, 0xaa, 0x42, 0x50, 0x6d, 0xa3, 0x5a, 0x3f, 0x67, 0x55,
        0x6a, 0x5c, 0x6c, 0x92, 0x07, 0x44, 0xd3, 0xd6, 0x97, 0x6b, 0x5a, 0x5c, 0xcf, 0x6b, 0xdf,
        0xf5, 0x1d, 0x4c, 0xde, 0x3f, 0x2d, 0xf7, 0x95, 0x3c, 0x70, 0xde, 0x65, 0xcf, 0x22, 0x96,
        0xe8, 0x12, 0x8f, 0xa7, 0x9a, 0xa7, 0x68, 0xfe, 0x00, 0x18, 0x7f, 0x6d, 0xed, 0x98, 0xc9,
        0x6b, 0xfc, 0xd2, 0x9b, 0xa9, 0x08, 0x93, 0x3e, 0x3e, 0x7f, 0x7c, 0x63, 0x03, 0x49, 0xdf,
        0x52, 0x18, 0xcf, 0x9f, 0xf3, 0xbb, 0x11, 0xb5, 0xa3, 0x05, 0x03, 0x6b, 0xba, 0xf8, 0x91,
        0x60, 0xc2, 0xf1, 0x1e, 0x5f, 0x0c, 0x81, 0x08, 0x25, 0xda, 0xed, 0xef, 0xa0, 0xfe, 0x73,
        0xbf, 0xd8, 0xe3, 0xdb, 0xdc, 0xf6, 0x54, 0x42, 0x9a, 0xea, 0xf2, 0x69, 0x46, 0x14, 0x0c,
        0x86, 0x97, 0x56, 0x95, 0x8b, 0x5b, 0x1f, 0x87, 0x99, 0x5c, 0xaf, 0x6a, 0xf4, 0xe5, 0x66,
        0xe9, 0xf9, 0x7b, 0xa5, 0x1f, 0xf8, 0x8e, 0xa7, 0x81, 0xcc, 0x4e, 0xdd, 0x20, 0x94, 0x2d,
        0x31, 0x78, 0xb6, 0x26, 0xf6, 0x41, 0x07, 0xa7, 0xad, 0x97, 0x18, 0xff, 0x7a, 0x0f, 0x3c,
        0x55, 0x4b, 0xc3, 0x4d, 0x58, 0xc9, 0x56, 0xed, 0x6b, 0x69, 0xc4, 0x56, 0xf4, 0xf0, 0x5f,
        0x58, 0x7f, 0x98, 0xfa, 0x4a, 0xf7, 0x8e, 0xda, 0x49, 0xc8, 0x69, 0x88, 0xae, 0x9c, 0x39,
        0x1f, 0xa2, 0xc4, 0x58, 0x78, 0x35, 0xba, 0x73, 0x01, 0xae, 0xa2, 0xa9, 0x4d, 0x90, 0xf3,
        0x98, 0x14, 0xb9, 0x6f, 0x4f, 0x21, 0x01, 0xdd, 0xad, 0x1a, 0x52, 0x45, 0x13, 0xe9, 0x08,
        0xb0, 0x89, 0x54, 0xee, 0xe3, 0x44, 0x08, 0xd4, 0x77, 0x4b, 0xab, 0x65, 0x6e, 0xba, 0xec,
        0xf9, 0xce, 0x9d, 0x5f, 0xd5, 0x4a, 0xde, 0xdf, 0x8f, 0x67, 0x47, 0x65, 0xe2, 0x2f, 0x8f,
        0x9f, 0x53, 0xab, 0x56, 0xb1, 0x22, 0x6c, 0xe3, 0x5c, 0x8e, 0x97, 0x2f, 0x9f, 0x82, 0xf1,
        0xd2, 0x11, 0x2f, 0x1a, 0xc3, 0x2a, 0x60, 0x28, 0x83,
    ];

    // ed_LTSK random bytes:
    let ed_ltsk = [
        0x15, 0xf5, 0xa7, 0xdb, 0xa0, 0x11, 0x21, 0xea, 0x23, 0xea, 0x88, 0x7f, 0x0a, 0x14, 0xb0,
        0x27, 0xb6, 0xe6, 0xd4, 0x2d, 0xd1, 0x5b, 0xc9, 0x59, 0x19, 0x94, 0xbc, 0x22, 0xee, 0x52,
        0xfa, 0xa9,
    ];

    const TIMED_WRITE_SLOTS: usize = 8;
    const TIMED_WRITE_SLOTS_DATA: usize = 128;

    let timed_write_data = {
        static DATA_STATE: StaticCell<[u8; TIMED_WRITE_SLOTS * TIMED_WRITE_SLOTS_DATA]> =
            StaticCell::new();
        DATA_STATE.init([0u8; TIMED_WRITE_SLOTS * TIMED_WRITE_SLOTS_DATA])
    };

    let timed_writes = {
        static SLOT_STATE: StaticCell<[Option<TimedWrite>; TIMED_WRITE_SLOTS]> = StaticCell::new();
        SLOT_STATE.init([None; TIMED_WRITE_SLOTS])
    };

    let mut ctx = HapPeripheralContext::new(
        buffer,
        pair_ctx,
        timed_write_data,
        timed_writes,
        &server.accessory_information,
        &server.protocol,
        &server.pairing,
    )?;
    ctx.add_service(&server.lightbulb)?;
    ctx.assign_static_data(&accessory_static_data);

    ctx.print_handles();
    let random_buffer = vec![
        0x75, 0x35, 0xcb, 0x53, 0x6e, 0xbb, 0x8c, 0x63, 0x94, 0xf5, 0x85, 0xe6, 0x7d, 0xc5, 0x65,
        0x2d, 0x83, 0xe4, 0xea, 0x76, 0x4c, 0xa3, 0x61, 0xe3, 0x85, 0xca, 0x07, 0x57, 0x29, 0x47,
        0x2d, 0x55,
    ];
    let mut support = crate::pairing::test::TestPairSupport::default();
    support.ed_ltsk = ed_ltsk;
    support.add_random(&random_buffer);

    struct ExchangeTest {
        handle: u16,
        incoming: &'static [u8],
        outgoing: &'static [u8],
    }

    // it would be nice if we understood why the handle ids are different.
    let handle_pair_setup = 84;
    let handle_pair_verify = 87;
    let handle_pair_pairings = 0x5d;
    let handle_hardware_revision = 0x36;
    let handle_serial_number = 0x30;
    let handle_name = 0x2d;
    let handle_adk_version = 0x39;
    let handle_manufacturer = 0x27;
    let handle_firmware_version = 0x33;
    let handle_identify = 0x24;
    let handle_service_signature = 0x44;
    let handle_version = 0x47;
    let handle_lightbulb_on = 0x6a;
    let handle_lightbulb_name = 0x67;
    let handle_model = 0x2a;

    // Next followes a few 'random' tests created when I was working on the signatures.
    // After that follows a full pairing, pair verify exchange and subsequent messages.

    let service_signature_req = [0, 6, 0x3a, 0x10, 0];
    let service_signature_req =
        pdu::ServiceSignatureReadRequest::parse_pdu(&service_signature_req)?;
    let resp = ctx
        .service_signature_request(&service_signature_req)
        .await?;
    {
        let reply = ctx.get_response(resp);
        warn!("reply: {:?}", reply);

        let expected_req = [2, 0x3a, 0, 6, 0, 0xf, 2, 4, 0, 0x10, 0];
        assert_eq!(&*reply, expected_req);
    }

    // and then it sends... which we have no clue what it is yet.
    let payload = [0x00, 0x01, 0xae, 0x20, 0x00];
    // [micro_hap::ble] Writing protocol.service_signature  [0, 1, ae, 2, 2]
    let service_signature_req = pdu::ServiceSignatureReadRequest::parse_pdu(&payload)?;
    let resp = ctx
        .service_signature_request(&service_signature_req)
        .await?;
    // Oh... that's a characteristic signature read request.
    // we need the PDU types, and interpret based on that.
    let _ = resp;

    // Test service signature response ------------
    {
        let incoming_data: &[u8] = &[0x00, 0x06, 0x0d, 0x10, 0x00];
        let handle = 0x11;

        let outgoing_data: &[u8] = &[
            0x02, 0x0d, 0x00, 0x06, 0x00, 0x0f, 0x02, 0x04, 0x00, 0x10, 0x00,
        ];
        ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming_data, handle)
            .await?;

        let resp = ctx.handle_read_outgoing(handle).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");

        assert_eq!(&*resp_buffer, outgoing_data);
    }

    {
        let incoming_data: &[u8] = &[0x00, 0x01, 0x9c, 0x11, 0x00];
        let handle = 0x11;

        let outgoing_data: &[u8] = &[
            0x02, 0x9c, 0x00, 0x35, 0x00, 0x04, 0x10, 0x91, 0x52, 0x76, 0xbb, 0x26, 0x00, 0x00,
            0x80, 0x00, 0x10, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x07, 0x02, 0x10, 0x00, 0x06,
            0x10, 0x91, 0x52, 0x76, 0xbb, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xa2,
            0x00, 0x00, 0x00, 0x0a, 0x02, 0x10, 0x00, 0x0c, 0x07, 0x1b, 0x00, 0x00, 0x27, 0x01,
            0x00, 0x00,
        ];
        ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming_data, handle)
            .await?;

        let resp = ctx.handle_read_outgoing(handle).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");

        assert_eq!(&*resp_buffer, outgoing_data);
    }
    //   ----------------------------------
    //  "Bad" tests... as in we test a bad / incorrect payload / request and confirm the response is correct.
    //   ----------------------------------

    // Test bad service signature response, data created from mocking this request on the cpp side.
    {
        let incoming_data: &[u8] = &[0x00, 0xf6, 0x0d, 0x10, 0x00]; // invalid opcode 0xf6
        let handle = 0x11;

        let outgoing_data: &[u8] = &[0x02, 0x0d, 0x01];
        ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming_data, handle)
            .await?;

        let resp = ctx.handle_read_outgoing(handle).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");

        assert_eq!(&*resp_buffer, outgoing_data);
    }

    // Bad characteristic instance id
    {
        let incoming_data: &[u8] = &[0x00, 0x01, 0x9c, 0xf1, 0x00];
        let handle = 0x11;

        let outgoing_data: &[u8] = &[0x02, 0x9c, 0x04];
        ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming_data, handle)
            .await?;

        let resp = ctx.handle_read_outgoing(handle).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");

        assert_eq!(&*resp_buffer, outgoing_data);
    }

    // Bad pair setup messages;
    {
        // Incorrect instance id:
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0xf3, 0x22, 0xff, 0x0b, 0x00, 0x01, 0x06, 0x00, 0x01, 0x00, 0x06, 0x01,
            0x01, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[0x02, 0xf3, 0x04];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_setup,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_pair_setup).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }
    // Bad pair setup messages;
    {
        // Invalid method, 0x06 -> 0xf6, results invalid request.
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0xf3, 0x22, 0x00, 0x0b, 0x00, 0x01, 0xf6, 0x00, 0x01, 0x00, 0x06, 0x01,
            0x01, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[0x02, 0xf3, 0x06];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_setup,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_pair_setup).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Try to write to the lightbulb on endpoint.
    {
        // Input data doesn't matter really, lets just do a write.
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0xf3, 0x33, 0x00, 0x0b, 0x00, 0x01, 0xf6, 0x00, 0x01, 0x00, 0x06, 0x01,
            0x01, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[0x02, 0xf3, 0x05];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_on,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_lightbulb_on).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Try to read to the lightbulb on endpoint.
    {
        // Input data doesn't matter really, lets just do a write.
        let incoming_data: &[u8] = &[
            0x00, 0x03, 0xf3, 0x33, 0x00, 0x0b, 0x00, 0x01, 0xf6, 0x00, 0x01, 0x00, 0x06, 0x01,
            0x01, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[0x02, 0xf3, 0x05];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_on,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_lightbulb_on).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }
    // Check pairing features  ------------
    {
        let incoming_data: &[u8] = &[0x00, 0x01, 0x56, 0x24, 0x00];
        let handle = 0x24;
        let outgoing_data: &[u8] = &[
            0x02, 0x56, 0x00, 0x35, 0x00, 0x04, 0x10, 0x91, 0x52, 0x76, 0xbb, 0x26, 0x00, 0x00,
            0x80, 0x00, 0x10, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x07, 0x02, 0x20, 0x00, 0x06,
            0x10, 0x91, 0x52, 0x76, 0xbb, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x55,
            0x00, 0x00, 0x00, 0x0a, 0x02, 0x01, 0x00, 0x0c, 0x07, 0x04, 0x00, 0x00, 0x27, 0x01,
            0x00, 0x00,
        ];
        ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming_data, handle)
            .await?;

        let resp = ctx.handle_read_outgoing(handle).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        assert_eq!(&*resp_buffer, outgoing_data);
    }
    {
        let incoming_data: &[u8] = &[0x00, 0x03, 0x58, 0x24, 0x00];
        let handle = 0x24;
        let outgoing_data: &[u8] = &[0x02, 0x58, 0x00, 0x03, 0x00, 0x01, 0x01, 0x00];
        ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming_data, handle)
            .await?;

        let resp = ctx.handle_read_outgoing(handle).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");

        assert_eq!(&*resp_buffer, outgoing_data);
    }
    //   ----------------------------------

    // Incoming info request  ------------
    if false {
        // This appears to only happen during the software authentication workflow, which we may not need?
        let incoming_data: &[u8] = &[0x00, 0x12, 0xbe, 0x11, 0x00];
        let handle = 0x11;

        // We don't know what outgoing should be here.
        ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming_data, handle)
            .await?;

        let resp = ctx.handle_read_outgoing(handle).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
    }

    // Writing to pair setup.  ------------
    // m1 & m2
    {
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0xf3, 0x22, 0x00, 0x0b, 0x00, 0x01, 0x06, 0x00, 0x01, 0x00, 0x06, 0x01,
            0x01, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[
            0x02, 0xf3, 0x00, 0x9d, 0x01, 0x01, 0xff, 0x06, 0x01, 0x02, 0x03, 0xff, 0x64, 0x43,
            0x37, 0x03, 0x65, 0x86, 0x5d, 0x21, 0x46, 0xa6, 0x85, 0x54, 0x0d, 0x38, 0x8a, 0x51,
            0x84, 0xb8, 0x35, 0x51, 0x90, 0x69, 0x57, 0xd2, 0x38, 0x5b, 0xab, 0xdc, 0x5a, 0xf3,
            0x97, 0xbc, 0xdc, 0x35, 0x24, 0x31, 0x99, 0x17, 0xcc, 0xf2, 0x5c, 0xbb, 0x6e, 0x3c,
            0x4a, 0x5b, 0x35, 0x83, 0x7c, 0x20, 0x60, 0x0f, 0x45, 0x79, 0x39, 0x3e, 0xfa, 0x90,
            0xfc, 0xa0, 0x5c, 0x71, 0xe5, 0x1b, 0x39, 0xf8, 0x8c, 0x4e, 0xd8, 0xe6, 0xcf, 0xb9,
            0xdc, 0x05, 0xb6, 0x18, 0x75, 0x2b, 0xa4, 0xc8, 0x90, 0x06, 0x66, 0x80, 0x85, 0x92,
            0x7a, 0x80, 0xd4, 0x08, 0x3a, 0xfc, 0x36, 0x40, 0xad, 0xa3, 0x7b, 0xdc, 0xa2, 0x6b,
            0x49, 0x71, 0x0a, 0x25, 0xc1, 0x97, 0x27, 0x7f, 0x8f, 0x8e, 0x28, 0xa1, 0xf9, 0xff,
            0x6a, 0x87, 0x32, 0x29, 0x72, 0x24, 0x59, 0x4a, 0xf3, 0xfa, 0xcd, 0xe5, 0xae, 0xe7,
            0x3e, 0x90, 0xa5, 0xb0, 0xfa, 0x9e, 0x80, 0x2b, 0xe0, 0x53, 0x33, 0xf2, 0xe7, 0x4b,
            0x6b, 0xdd, 0x56, 0x69, 0x9b, 0x40, 0xed, 0x24, 0xbd, 0x98, 0x23, 0xc2, 0x7b, 0x68,
            0xb7, 0xd9, 0x8f, 0xd6, 0xb4, 0x52, 0x90, 0x42, 0x07, 0xd5, 0x48, 0x63, 0xe0, 0xc6,
            0xd7, 0x18, 0x95, 0xc6, 0xc0, 0x8f, 0x80, 0xe7, 0xc6, 0x02, 0x7c, 0x06, 0x19, 0x8f,
            0x9f, 0xcc, 0xa7, 0x80, 0x67, 0x85, 0x2b, 0xa8, 0x8d, 0x11, 0xcd, 0xdd, 0xa9, 0x98,
            0xa4, 0x75, 0xe8, 0xde, 0xec, 0xfc, 0xf4, 0x92, 0x0d, 0x26, 0xb4, 0x10, 0xbc, 0xc4,
            0x48, 0x98, 0x07, 0x5b, 0x5e, 0x0f, 0x63, 0x47, 0x33, 0xe0, 0x50, 0xc0, 0xbe, 0x8a,
            0x9d, 0x31, 0xe0, 0x44, 0x7d, 0x26, 0x62, 0xf1, 0xc4, 0x98, 0x2b, 0x6d, 0x08, 0x5b,
            0xde, 0xac, 0xea, 0x83, 0xf7, 0x8a, 0x6f, 0xa6, 0x2d, 0x6d, 0x01, 0x9a, 0x54, 0x8a,
            0xc5, 0xf9, 0x7d, 0x03, 0x81, 0xc7, 0x65, 0x77, 0xe1, 0x64, 0x9c, 0xad, 0x5f, 0x28,
            0x78, 0xc8, 0x25, 0x57, 0x89, 0x00, 0xff, 0x7e, 0xc9, 0x9f, 0x4e, 0x87, 0x43, 0xe9,
            0x1a, 0x05, 0x6d, 0xcd, 0x50, 0x2c, 0xa2, 0x85, 0x52, 0xef, 0x7a, 0x8a, 0xf1, 0xe0,
            0x3a, 0x38, 0x2a, 0x76, 0x1c, 0x61, 0xaf, 0x06, 0xb3, 0xf9, 0x3d, 0x8b, 0xb6, 0x1b,
            0xab, 0x6c, 0x14, 0xa3, 0x7b, 0xe0, 0x4c, 0x45, 0x3c, 0xb5, 0x95, 0x2e, 0x96, 0xc5,
            0xb5, 0x23, 0xc7, 0x9e, 0xf6, 0xdd, 0xa3, 0xa2, 0x67, 0x6d, 0x7d, 0x54, 0x44, 0xe1,
            0x3b, 0x4c, 0xaa, 0xf3, 0x99, 0x89, 0xc9, 0xa0, 0x23, 0x6f, 0xf2, 0x94, 0x60, 0x7b,
            0x64, 0x1f, 0x1f, 0xea, 0xa2, 0x11, 0x63, 0x42, 0x10, 0xfb, 0x3c, 0xeb, 0x97, 0x9f,
            0x07, 0xc5, 0x9e, 0x7c, 0x54, 0x2b, 0xd6, 0x6d, 0x21, 0x5d, 0x3e, 0x26, 0x50, 0x80,
            0x0b, 0xa1, 0xce, 0xdb, 0xc0, 0x99, 0x3c, 0x16, 0x02, 0x10, 0x3d, 0xc2, 0x81, 0xab,
            0x08, 0xed, 0x4d, 0x8c, 0x52, 0x0c, 0xb2, 0x5f, 0xc2, 0x51, 0x9c, 0x1f,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_setup,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_pair_setup).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }
    // m3 & m4
    {
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0x5d, 0x22, 0x00, 0xd0, 0x01, 0x01, 0xff, 0x06, 0x01, 0x03, 0x03, 0xff,
            0xc9, 0x50, 0x62, 0x39, 0x72, 0xb4, 0x32, 0x9a, 0x6c, 0xbd, 0x1d, 0xc6, 0x52, 0x46,
            0xea, 0xdc, 0x2d, 0xe6, 0xd1, 0xd1, 0xa2, 0x16, 0x3f, 0x24, 0x21, 0xb1, 0x04, 0x40,
            0x08, 0xc2, 0xd7, 0xbf, 0xb2, 0xeb, 0x3e, 0x70, 0x7d, 0x8d, 0x1d, 0xca, 0x28, 0xed,
            0x48, 0xff, 0x79, 0x95, 0xea, 0x3b, 0x7f, 0xc1, 0x31, 0x5f, 0x8b, 0x72, 0xb3, 0xb6,
            0x33, 0xf3, 0x98, 0x80, 0x7f, 0x5c, 0x2c, 0xd6, 0x11, 0x5a, 0xa8, 0xf6, 0x35, 0x10,
            0xf5, 0xd0, 0x2a, 0x21, 0x75, 0xdc, 0x03, 0xd7, 0x5e, 0x9e, 0xbb, 0x82, 0x4e, 0x20,
            0xef, 0x66, 0xed, 0x63, 0x95, 0xe5, 0x49, 0x3e, 0x13, 0x13, 0x32, 0xa3, 0x9e, 0x55,
            0xaf, 0xea, 0xd0, 0xd4, 0x1a, 0x80, 0x18, 0xaa, 0x97, 0x4d, 0xf0, 0x1b, 0x25, 0xaf,
            0x96, 0x47, 0x34, 0x92, 0x9c, 0x5a, 0x42, 0xd4, 0xc7, 0xde, 0x42, 0xae, 0xc6, 0x8c,
            0xaa, 0x94, 0x88, 0xd0, 0xa2, 0x1f, 0xbc, 0xec, 0x90, 0xa5, 0x00, 0x00, 0xe4, 0xa1,
            0x74, 0x83, 0x0e, 0x69, 0x55, 0xf5, 0x3d, 0x2d, 0xc5, 0xf4, 0x11, 0x4e, 0xff, 0xae,
            0x7a, 0x85, 0xa3, 0x8c, 0x44, 0x0e, 0x12, 0x23, 0x87, 0x00, 0xa8, 0x19, 0x2a, 0x82,
            0xc7, 0xf2, 0x6d, 0x8d, 0xb9, 0x90, 0x04, 0xe7, 0xc5, 0xe8, 0x32, 0x4c, 0xcc, 0xad,
            0x7f, 0xbc, 0x5f, 0x9d, 0x96, 0xcd, 0xaa, 0xef, 0x03, 0x6a, 0xf9, 0xf2, 0xd6, 0x63,
            0x2c, 0xe9, 0xb0, 0xb3, 0x20, 0x18, 0xaf, 0x55, 0xd4, 0x50, 0x53, 0x47, 0xfe, 0xdc,
            0x60, 0x4f, 0xdd, 0xf9, 0xf2, 0x78, 0x24, 0xa6, 0xfc, 0x3a, 0x10, 0xcb, 0x97, 0x7c,
            0x5c, 0xbc, 0x4b, 0x9a, 0x83, 0xd2, 0x2b, 0x89, 0x6b, 0xc9, 0x36, 0x0b, 0xe1, 0x37,
            0x7e, 0x84, 0xfd, 0x3d, 0x25, 0x45, 0x45, 0x51, 0xf2, 0x4e, 0xba, 0x79, 0x01, 0xca,
            0xf9, 0x9c, 0x93, 0xa8, 0x69, 0x03, 0x81, 0x33, 0xd5, 0x56, 0x8d, 0xcf, 0x95, 0x10,
            0x7c, 0x20, 0xeb, 0x0c, 0xe8, 0x00, 0x1f, 0x1b, 0x9a, 0xdf, 0x0d, 0x01, 0xea, 0xa7,
            0x6f, 0xa4, 0xe1, 0xa7, 0x30, 0xe5, 0x62, 0x8a, 0x43, 0xe1, 0xa2, 0xf9, 0xb6, 0x13,
            0x3c, 0x69, 0x86, 0x3a, 0x97, 0x60, 0x98, 0xc5, 0xb4, 0x49, 0x56, 0xdc, 0x52, 0x69,
            0xe5, 0x8a, 0xda, 0xa3, 0x7f, 0x7b, 0xd4, 0xe5, 0x5d, 0xcb, 0xa0, 0xf6, 0x83, 0x4f,
            0x46, 0xa1, 0x74, 0xaa, 0xdf, 0xaf, 0xaa, 0x84, 0x39, 0xca, 0x01, 0xd7, 0xc9, 0xe0,
            0x6d, 0x36, 0x9b, 0x2c, 0x82, 0xe9, 0x85, 0x74, 0xef, 0x6c, 0x6c, 0xdf, 0xe7, 0xc4,
            0xcf, 0x71, 0x81, 0xf4, 0x07, 0x72, 0x59, 0x5b, 0xaa, 0xd5, 0x13, 0xeb, 0xda, 0x1c,
            0x33, 0xde, 0x43, 0xda, 0xac, 0xd2, 0xb4, 0x8e, 0x95, 0x79, 0xc6, 0x7f, 0x9e, 0x53,
            0xc9, 0x0c, 0xbe, 0x29, 0x2c, 0x5f, 0x7f, 0x35, 0x4e, 0x1a, 0x04, 0x40, 0x10, 0x6e,
            0x7f, 0x5d, 0x4b, 0xbd, 0x13, 0x0d, 0xf6, 0x52, 0x08, 0xdf, 0x83, 0x0c, 0xea, 0xf5,
            0x05, 0x47, 0x8b, 0x73, 0xc8, 0xdd, 0x04, 0x8f, 0xcf, 0xf7, 0xa3, 0x94, 0xed, 0x26,
            0x5c, 0x5e, 0x47, 0xb6, 0x18, 0xf6, 0xe0, 0xe2, 0x7f, 0xe1, 0xe1, 0x7b, 0xbc, 0x87,
            0x85, 0x81, 0x58, 0x64, 0x45, 0x94, 0x8f, 0xdc, 0xe8, 0x0a, 0xad, 0xeb, 0xa3, 0xf5,
            0x5b, 0x09, 0xf5, 0xbc, 0xb2, 0xa0, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[
            0x02, 0x5d, 0x00, 0x47, 0x00, 0x01, 0x45, 0x06, 0x01, 0x04, 0x04, 0x40, 0xa0, 0xf2,
            0xc0, 0x55, 0x21, 0x57, 0xda, 0x19, 0x85, 0xcd, 0x0c, 0x0f, 0xcb, 0x76, 0x80, 0xa7,
            0xc3, 0x11, 0xf3, 0x2d, 0xe7, 0xb1, 0xed, 0x3b, 0xb9, 0xc8, 0xae, 0xab, 0xee, 0x07,
            0x1a, 0xbc, 0x0c, 0xe5, 0xd8, 0xf2, 0x81, 0x8d, 0x6b, 0x92, 0xe8, 0x78, 0xcb, 0x5b,
            0xb6, 0xe4, 0xea, 0x0b, 0x31, 0xe2, 0xfd, 0xcd, 0x01, 0x2b, 0xaa, 0x73, 0x78, 0x7c,
            0x3f, 0xfe, 0x14, 0x3b, 0xdc, 0x19,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_setup,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_pair_setup).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }
    // m5 & m6
    {
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0x06, 0x22, 0x00, 0xa4, 0x00, 0x01, 0x9f, 0x05, 0x9a, 0x46, 0xf1, 0xed,
            0x7b, 0x03, 0x13, 0x81, 0x27, 0xf4, 0x49, 0xf5, 0xd2, 0x58, 0x84, 0x3e, 0xab, 0x62,
            0x16, 0xcc, 0xb2, 0x81, 0x22, 0xcf, 0x0c, 0x24, 0x3e, 0xbb, 0x7c, 0xc1, 0xb0, 0x58,
            0x20, 0xb7, 0x49, 0x29, 0x86, 0xca, 0x7c, 0x5d, 0x22, 0x83, 0x4c, 0xdb, 0x3c, 0xeb,
            0x1f, 0x18, 0xb8, 0xc6, 0x5e, 0xdf, 0xed, 0x23, 0xcd, 0x15, 0xa7, 0x6b, 0x5f, 0xcd,
            0x3b, 0x50, 0xe2, 0x2d, 0x2f, 0x96, 0x34, 0x65, 0x35, 0x7d, 0xda, 0xdc, 0xbc, 0x18,
            0x5a, 0xe4, 0x27, 0x39, 0xfb, 0xe7, 0xf6, 0x41, 0xef, 0xe4, 0xb6, 0x51, 0x23, 0x68,
            0x55, 0x3b, 0xb2, 0x24, 0x3a, 0xed, 0xda, 0x1b, 0x5c, 0x6d, 0x9d, 0xf3, 0xe1, 0xfd,
            0x8b, 0xfd, 0x8a, 0xff, 0xf0, 0xb3, 0x09, 0xe0, 0x42, 0x8d, 0x8a, 0xe4, 0xea, 0x54,
            0xc1, 0x3e, 0xe1, 0x63, 0xec, 0xf8, 0x5a, 0x48, 0x03, 0x3f, 0xef, 0x17, 0xe0, 0x1f,
            0x18, 0x1c, 0x19, 0xb6, 0x0e, 0xad, 0x62, 0x1b, 0x90, 0x4f, 0xbe, 0x6a, 0x5f, 0x0a,
            0xdd, 0x6c, 0xb0, 0x42, 0x5a, 0xf0, 0xa3, 0xf9, 0xec, 0x62, 0xb0, 0x06, 0x01, 0x05,
            0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[
            0x02, 0x06, 0x00, 0x8e, 0x00, 0x01, 0x8c, 0x06, 0x01, 0x06, 0x05, 0x87, 0xc0, 0x2d,
            0xab, 0x99, 0xf3, 0x9c, 0x2f, 0xeb, 0x40, 0xb4, 0x88, 0xe7, 0x8c, 0x9e, 0x0f, 0x7a,
            0x13, 0xe2, 0x4a, 0x5a, 0xd7, 0x66, 0xc9, 0x2b, 0x45, 0xd6, 0x72, 0x77, 0x81, 0x12,
            0xac, 0x57, 0x15, 0x8d, 0xb1, 0xae, 0x62, 0x7a, 0x69, 0x0c, 0xee, 0xf8, 0xeb, 0x31,
            0x3d, 0x39, 0xbf, 0x6b, 0x1f, 0xc8, 0x16, 0x57, 0x0b, 0x06, 0xf0, 0x56, 0x45, 0x87,
            0xfa, 0x33, 0x92, 0x9a, 0x69, 0x3c, 0xeb, 0x49, 0xc8, 0x9c, 0x06, 0xfb, 0xbe, 0xbf,
            0xec, 0xf7, 0x60, 0xba, 0x0b, 0xeb, 0x4d, 0x8a, 0xbe, 0x62, 0x9a, 0xe7, 0x16, 0xdc,
            0xa1, 0x61, 0x48, 0x3d, 0x2b, 0x78, 0x11, 0x75, 0xef, 0xe2, 0xb0, 0x63, 0xfe, 0x6c,
            0x3a, 0x86, 0x8c, 0x1c, 0x22, 0x9d, 0xcf, 0x3a, 0xb8, 0x61, 0x38, 0x18, 0x33, 0x09,
            0x54, 0xe8, 0xf1, 0xb9, 0x17, 0xa3, 0x81, 0xfe, 0x70, 0x50, 0x06, 0x7a, 0x9f, 0xd1,
            0x29, 0x85, 0x55, 0x77, 0x63, 0x9e, 0x04,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_setup,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_pair_setup).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // next up it reads a bunch of service and characteristic instance descriptor values. ALl of them in fact.

    // Writing to pair verify.  ------------
    // Then, we see a write request to pair verify.
    // Update the random for for the m2 cv_SK;

    let random_buffer = vec![
        0xe5, 0xb9, 0xee, 0xdd, 0x57, 0xd0, 0x40, 0x13, 0xf3, 0xaa, 0x88, 0xd9, 0x4b, 0x0d, 0x51,
        0xee, 0x92, 0x58, 0x9d, 0xfd, 0xa1, 0x5f, 0x96, 0x65, 0x2f, 0xee, 0x88, 0xd6, 0x3e, 0x0c,
        0x83, 0xc4,
    ];
    support.add_random(&random_buffer);

    {
        // Pair verify. m1 & m2
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0x34, 0x23, 0x00, 0x2a, 0x00, 0x01, 0x25, 0x06, 0x01, 0x01, 0x03, 0x20,
            0x1d, 0x74, 0xbd, 0x6a, 0x38, 0xdb, 0xea, 0x23, 0x6c, 0x1a, 0xcb, 0x88, 0x9a, 0xa7,
            0xb9, 0x6d, 0xde, 0x7f, 0x9c, 0xd5, 0x78, 0x34, 0x34, 0x12, 0xed, 0x1f, 0xf0, 0xac,
            0xf1, 0x02, 0x99, 0x01, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[
            0x02, 0x34, 0x00, 0x8e, 0x00, 0x01, 0x8c, 0x06, 0x01, 0x02, 0x03, 0x20, 0x8f, 0x47,
            0x6d, 0xf6, 0x0c, 0xec, 0xdb, 0xe9, 0xc7, 0xf5, 0x4a, 0x6c, 0x2a, 0x6d, 0xbf, 0xd7,
            0x1e, 0xef, 0xd7, 0xf4, 0xf6, 0xf2, 0x73, 0xae, 0xf9, 0x5a, 0x41, 0xfc, 0x93, 0xec,
            0xa2, 0x0e, 0x05, 0x65, 0xbb, 0x5e, 0xc0, 0x3f, 0x8d, 0xb9, 0x8a, 0x1c, 0xd6, 0x47,
            0xc7, 0x83, 0x11, 0xe4, 0x26, 0xff, 0xd1, 0xbe, 0x30, 0xed, 0x7a, 0xef, 0xa0, 0x2c,
            0xed, 0x09, 0xe5, 0x17, 0xf0, 0x81, 0x0f, 0xaa, 0xc5, 0xd4, 0x93, 0x68, 0x5e, 0x32,
            0xc2, 0xf1, 0x48, 0xcb, 0xde, 0x0c, 0x03, 0x82, 0xd2, 0xbf, 0xa4, 0x9a, 0xb4, 0xe7,
            0x91, 0x77, 0x43, 0xa0, 0xd5, 0x72, 0x76, 0x08, 0xa1, 0x0f, 0x73, 0xa0, 0x84, 0x7b,
            0x42, 0xac, 0x79, 0x24, 0xaf, 0x0c, 0xf8, 0x22, 0x0e, 0x53, 0x25, 0x0d, 0xb2, 0xb1,
            0x98, 0xc0, 0x6b, 0xd2, 0xee, 0x1a, 0xaa, 0x9b, 0xb9, 0x7e, 0x6f, 0xab, 0x12, 0xa2,
            0xcf, 0x69, 0x7e, 0x04, 0xb0, 0x61, 0x0a,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_verify,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_pair_verify).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    {
        // Pair verify. m3 & m4
        let incoming_data: &[u8] = &[
            0x00, 0x02, 0xa9, 0x23, 0x00, 0x82, 0x00, 0x01, 0x7d, 0x05, 0x78, 0x74, 0xda, 0xba,
            0x6e, 0x05, 0x61, 0x68, 0xce, 0x07, 0x34, 0x28, 0xa6, 0xda, 0xb7, 0x4d, 0x78, 0x73,
            0x1a, 0x24, 0x42, 0x74, 0x20, 0x75, 0xdc, 0x90, 0x16, 0xea, 0xc2, 0x03, 0xd7, 0x06,
            0x6e, 0xf7, 0x30, 0x20, 0x21, 0xf6, 0xab, 0x7b, 0xa3, 0xe1, 0xa6, 0xb0, 0x16, 0x62,
            0x4f, 0xf0, 0x22, 0xf2, 0x03, 0xa3, 0x4a, 0x25, 0x1b, 0x78, 0xb0, 0x8b, 0x7c, 0x10,
            0xa8, 0x70, 0xb8, 0xe8, 0xa5, 0xba, 0x7e, 0xab, 0xcd, 0x38, 0x25, 0x78, 0x88, 0xb2,
            0xe3, 0x3e, 0xd4, 0x38, 0xde, 0x06, 0x1f, 0xce, 0x08, 0x5b, 0xb1, 0xf4, 0x0b, 0xef,
            0x8e, 0x00, 0x19, 0xc8, 0x47, 0xd3, 0x73, 0xef, 0xbb, 0xe1, 0x98, 0x34, 0x6e, 0x72,
            0xca, 0x24, 0x70, 0x30, 0xfb, 0x41, 0x59, 0xc0, 0x7a, 0x19, 0xa5, 0xba, 0xca, 0xe3,
            0x43, 0xa5, 0xb9, 0x3d, 0x93, 0x06, 0x01, 0x03, 0x09, 0x01, 0x01,
        ];
        let outgoing: &[u8] = &[0x02, 0xa9, 0x00, 0x05, 0x00, 0x01, 0x03, 0x06, 0x01, 0x04];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_verify,
        )
        .await?;

        let resp = ctx.handle_read_outgoing(handle_pair_verify).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Secure session is now active!

    // Next request is on the hardware revision endpoint.
    {
        // Write on the hardware revision service.
        let incoming_data: &[u8] = &[
            0xdf, 0x33, 0x41, 0x57, 0x50, 0x87, 0xeb, 0x71, 0x98, 0xb2, 0x88, 0x5a, 0xf4, 0xa1,
            0xe2, 0xbe, 0xf3, 0xe1, 0x55, 0x43, 0x65,
        ];
        let outgoing: &[u8] = &[
            0x28, 0xd7, 0x57, 0x2c, 0x76, 0x03, 0xad, 0x00, 0x40, 0x75, 0xc1, 0xa0, 0x30, 0xf1,
            0x28, 0x30, 0xa5, 0x98, 0xa4, 0x8f, 0x51, 0x86, 0x13, 0x96, 0xa7, 0x81, 0x0a, 0x69,
            0xc2, 0xe8, 0x69, 0x89, 0x3f, 0x67, 0x27, 0xe6, 0x8d, 0xc4, 0x40, 0x06, 0xc3, 0x98,
            0x1d, 0x2c, 0x04, 0x54, 0xc8, 0x12, 0xeb, 0xc5, 0xbe, 0xfe, 0x29, 0xa5, 0x84, 0x7f,
            0x9c, 0xfb, 0x18, 0xf0, 0x0a, 0xfd, 0x37, 0xb5, 0xaf, 0xf0, 0x94, 0x80, 0xf5, 0x89,
            0x0b, 0x52, 0xdf, 0xed,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_hardware_revision,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_hardware_revision).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // And then the serial number.
    {
        let incoming_data: &[u8] = &[
            0x55, 0x04, 0xb0, 0xec, 0xc5, 0x05, 0xc1, 0xa2, 0x24, 0x2a, 0x56, 0x78, 0xd5, 0x32,
            0xa0, 0xe6, 0x74, 0xa6, 0x2c, 0x5b, 0xb0,
        ];
        let outgoing: &[u8] = &[
            0x7d, 0x13, 0x44, 0x5e, 0xd2, 0xfd, 0x1b, 0xe4, 0x49, 0xfb, 0x18, 0xb9, 0xfd, 0x63,
            0x81, 0xb7, 0xc2, 0x54, 0xbe, 0xbf, 0x29, 0xc0, 0x94, 0x2a, 0x25, 0x04, 0x7a, 0x51,
            0x09, 0x7d, 0x38, 0x5c, 0x05, 0x33, 0xec, 0xde, 0x77, 0xbf, 0x76, 0x5e, 0x55, 0xe2,
            0x33, 0xd8, 0x68, 0x75, 0xe3, 0x90, 0x9a, 0x9b, 0x3b, 0x83, 0x46, 0x6c, 0xf9, 0x4c,
            0x68, 0x19, 0xc8, 0xfc, 0xdb, 0x84, 0x18, 0x4a, 0x08, 0x88, 0xce, 0x5b, 0xcd, 0x2b,
            0xac, 0x34, 0x1d, 0x0f,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_serial_number,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_serial_number).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // And then the model
    {
        let incoming_data: &[u8] = &[
            0x9e, 0xf7, 0x09, 0xf5, 0x15, 0x41, 0xb4, 0x5e, 0x12, 0x04, 0x84, 0xfc, 0x0f, 0xce,
            0x52, 0xac, 0xff, 0xc4, 0x21, 0x43, 0x93,
        ];
        let outgoing: &[u8] = &[
            0xa6, 0x83, 0xf9, 0xd2, 0xfa, 0x9e, 0x2e, 0xc0, 0x15, 0xe4, 0xda, 0xae, 0x71, 0x27,
            0xe6, 0x5f, 0x07, 0x5e, 0x26, 0xac, 0xe6, 0x75, 0xdb, 0x1d, 0x25, 0x3a, 0x36, 0xfc,
            0x98, 0x79, 0x37, 0xb6, 0x00, 0xc7, 0x68, 0xb3, 0xbe, 0x59, 0x46, 0x2a, 0x40, 0xfc,
            0x71, 0x06, 0xca, 0xb3, 0x5f, 0xd9, 0xf9, 0x49, 0x60, 0x7c, 0xd1, 0x1a, 0x0b, 0x2e,
            0xae, 0xaf, 0x5a, 0x17, 0x15, 0x9b, 0x9d, 0x7d, 0xc2, 0xe0, 0xfa, 0x0a, 0x32, 0x84,
            0x07, 0x35, 0x3c, 0xef,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_serial_number,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_serial_number).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // And name
    {
        let incoming_data: &[u8] = &[
            0x35, 0x8c, 0x9d, 0xa2, 0x1f, 0x46, 0xba, 0xf2, 0x2c, 0x23, 0x6a, 0x50, 0x6a, 0xf4,
            0xf0, 0x90, 0xc2, 0x27, 0xb9, 0x9b, 0x34,
        ];
        let outgoing: &[u8] = &[
            0x3c, 0xc8, 0xf3, 0xc7, 0x7a, 0x56, 0xb0, 0x83, 0x8d, 0x10, 0xe6, 0xaa, 0xf5, 0xba,
            0xc7, 0xfa, 0x20, 0x5b, 0x71, 0x79, 0x56, 0x12, 0x4d, 0x7a, 0x68, 0x80, 0x88, 0x3e,
            0xad, 0x02, 0x95, 0x45, 0xa5, 0x03, 0x49, 0x2d, 0x79, 0x46, 0x2d, 0x08, 0x86, 0x0f,
            0x7e, 0x89, 0x69, 0x92, 0xb9, 0xbe, 0x31, 0x83, 0x24, 0x41, 0xa0, 0xf7, 0xa0, 0x95,
            0x76, 0x09, 0x83, 0x77, 0x32, 0xaa, 0x35, 0xac, 0x96, 0x3e, 0x72, 0x48, 0x9f, 0xa4,
            0x66, 0x99, 0x8c, 0xdd,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_name,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_name).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // ADK version...
    {
        let incoming_data: &[u8] = &[
            0x66, 0x8f, 0xcb, 0x09, 0xd0, 0xd9, 0x1e, 0xdf, 0x7c, 0xa6, 0x47, 0x3b, 0x6f, 0x75,
            0x18, 0x76, 0xd2, 0x04, 0x26, 0x7a, 0x9f,
        ];
        let outgoing: &[u8] = &[
            0xe4, 0xfb, 0x1e, 0x38, 0x85, 0xca, 0xd9, 0x36, 0xbd, 0xac, 0x36, 0x2a, 0x18, 0xaa,
            0xe5, 0x37, 0x70, 0xee, 0xb7, 0x4f, 0x44, 0xdf, 0xad, 0xdc, 0x05, 0x0a, 0xa1, 0xb1,
            0x98, 0x75, 0x7b, 0x18, 0xb9, 0x9b, 0xcb, 0xc8, 0xf2, 0xba, 0xd9, 0xa7, 0xb9, 0xef,
            0x79, 0x52, 0x24, 0xf1, 0x1e, 0xc8, 0x44, 0xeb, 0x89, 0x11, 0x67, 0xa7, 0xc9, 0x6b,
            0xec, 0xce, 0xb4, 0x25, 0x1a, 0x28, 0x6d, 0x2c, 0x09, 0xc8, 0xb0, 0xbc, 0xbf, 0x99,
            0xf1, 0x25, 0x62, 0xeb,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_adk_version,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_adk_version).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Manufacturer
    {
        let incoming_data: &[u8] = &[
            0x32, 0x72, 0x7c, 0x3b, 0x59, 0x40, 0xdd, 0xba, 0x59, 0x82, 0xab, 0x76, 0xe7, 0x21,
            0x1a, 0x99, 0x5c, 0xd8, 0xc1, 0x3b, 0x35,
        ];
        let outgoing: &[u8] = &[
            0x33, 0x7a, 0x6b, 0x4f, 0x53, 0x01, 0xdf, 0x0b, 0x98, 0xe0, 0x85, 0x94, 0xbf, 0x2c,
            0xb2, 0x2f, 0x3c, 0x2f, 0x64, 0x75, 0x28, 0xb0, 0xcd, 0xf6, 0xdf, 0x68, 0x03, 0xcb,
            0x65, 0x87, 0x57, 0x0f, 0x4d, 0x48, 0xa7, 0x15, 0xd7, 0x4b, 0x77, 0x2e, 0xf9, 0x31,
            0x2a, 0xcd, 0x8a, 0x1d, 0x3a, 0x10, 0x8d, 0xeb, 0xf0, 0xe5, 0x79, 0xcb, 0x09, 0xa9,
            0x7d, 0xd5, 0x0f, 0xcc, 0x40, 0x94, 0x4f, 0x9b, 0x7f, 0x3d, 0x7a, 0xf8, 0x72, 0xee,
            0xda, 0x0e, 0xbe, 0x7d,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_manufacturer,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_manufacturer).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Firmware version
    {
        let incoming_data: &[u8] = &[
            0x56, 0x55, 0x73, 0x57, 0xf1, 0xc2, 0x41, 0x16, 0xe5, 0x78, 0x9d, 0x36, 0xec, 0xfd,
            0x2d, 0x9a, 0xf5, 0x96, 0x7c, 0x7c, 0x5a,
        ];
        let outgoing: &[u8] = &[
            0xf1, 0x35, 0x2c, 0xc3, 0xb2, 0x9b, 0x52, 0xd1, 0x36, 0x45, 0xf4, 0x02, 0x26, 0x60,
            0x2e, 0xa8, 0xdc, 0x6a, 0x1e, 0x02, 0x99, 0x0c, 0x0e, 0x06, 0xd1, 0x6a, 0x41, 0xdc,
            0x10, 0xa7, 0x76, 0xce, 0xb1, 0xf4, 0x17, 0x64, 0x89, 0xd4, 0xc8, 0xc6, 0xcb, 0xcc,
            0x8f, 0xdc, 0x74, 0xca, 0x4d, 0x2a, 0x60, 0x07, 0xa1, 0xcb, 0xc4, 0x9e, 0x46, 0x6b,
            0x7a, 0xf3, 0xa5, 0x7a, 0x96, 0x60, 0x78, 0x15, 0xf0, 0x19, 0x17, 0x1f, 0x26, 0x93,
            0xea, 0x68, 0x6f, 0xff,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_firmware_version,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_firmware_version).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Identify
    {
        let incoming_data: &[u8] = &[
            0x9e, 0x8a, 0xcf, 0xd9, 0xe7, 0x39, 0x9e, 0xec, 0x96, 0x8b, 0x9b, 0x22, 0xcf, 0xde,
            0x21, 0x30, 0x4f, 0xb6, 0xfe, 0x26, 0x1a,
        ];
        let outgoing: &[u8] = &[
            0x2c, 0x30, 0xaa, 0xf1, 0x38, 0x5a, 0x05, 0xb6, 0xeb, 0x26, 0x3f, 0x8c, 0x20, 0x68,
            0xba, 0x46, 0x55, 0x2d, 0x7f, 0x40, 0x42, 0x51, 0xff, 0xf9, 0x71, 0xdf, 0xb3, 0xbe,
            0x1c, 0xc8, 0x44, 0x62, 0x34, 0xa2, 0x91, 0xb1, 0xa2, 0x47, 0x33, 0x05, 0xef, 0x82,
            0x75, 0x13, 0x6c, 0xe6, 0x04, 0x87, 0xba, 0xf5, 0x66, 0xfa, 0xe7, 0xdb, 0x21, 0x7a,
            0x10, 0xed, 0x22, 0xbd, 0x1d, 0xa6, 0xbd, 0xca, 0xbf, 0x24, 0x90, 0x5b, 0x89, 0x0f,
            0xae, 0x1b, 0x8c, 0xd3,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_identify,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_identify).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Service signature?
    {
        struct ServiceSigTest {
            incoming: &'static [u8],
            outgoing: &'static [u8],
        }
        let tests = [
            ServiceSigTest {
                incoming: &[
                    0x94, 0xac, 0x60, 0xfe, 0xec, 0x02, 0x29, 0xbb, 0x88, 0x07, 0x87, 0x95, 0xfb,
                    0x76, 0xf2, 0xb6, 0x67, 0x91, 0x3e, 0xf0, 0xa4,
                ],
                outgoing: &[
                    0x49, 0x55, 0x89, 0x02, 0x21, 0x6e, 0x10, 0xdb, 0x76, 0x96, 0x2e, 0x53, 0x66,
                    0xa4, 0xca, 0x06, 0x3d, 0xbf, 0x84, 0xe2, 0xad, 0x82, 0x27, 0x33, 0xf2, 0xb5,
                    0x85,
                ],
            },
            ServiceSigTest {
                incoming: &[
                    0x5a, 0x59, 0x70, 0x78, 0x9d, 0xd3, 0xec, 0x0d, 0x66, 0xad, 0x69, 0x05, 0xfa,
                    0xb6, 0xaf, 0x25, 0x64, 0x79, 0xf6, 0x34, 0xe6,
                ],
                outgoing: &[
                    0x92, 0x7c, 0xb2, 0xde, 0xfb, 0x33, 0xf6, 0x74, 0xea, 0xe9, 0x7b, 0xe8, 0x94,
                    0xba, 0x2d, 0x73, 0x30, 0x81, 0x2b, 0x1a, 0xf6, 0xe1, 0xa9, 0x78, 0x93, 0xe3,
                    0xf8, 0x76, 0xc5, 0x95, 0x86, 0x7f, 0xd5, 0x90, 0x79, 0xf3, 0x4b, 0x41, 0x74,
                    0x91, 0xe4, 0x80, 0x74, 0x24, 0xd2, 0x40, 0x06, 0xc5, 0x79, 0x61, 0x6f, 0xa4,
                    0x84, 0xfa, 0x8d, 0x55, 0xcb, 0x38, 0x7e, 0x4e, 0x5d, 0x4b, 0xbd, 0x61, 0xcd,
                    0x90, 0x8d, 0x70, 0xa5, 0x2b, 0x0b, 0x86, 0x1a, 0x56,
                ],
            },
        ];

        for ServiceSigTest { incoming, outgoing } in tests.iter() {
            ctx.handle_write_incoming_test(
                &hap,
                &mut support,
                &mut accessory,
                incoming,
                handle_service_signature,
            )
            .await?;
            let resp = ctx.handle_read_outgoing(handle_service_signature).await?;
            let resp_buffer = resp.expect("expecting a outgoing response");
            info!("outgoing: {:02x?}", &*resp_buffer);
            assert_eq!(&*resp_buffer, *outgoing);
        }
    }

    // Protocol Version
    {
        let incoming_data: &[u8] = &[
            0x28, 0xb4, 0x47, 0x6f, 0x30, 0x31, 0xcb, 0x3b, 0xc1, 0xa6, 0x81, 0x61, 0x60, 0xc8,
            0xf9, 0x6a, 0xb7, 0x88, 0x0e, 0x5a, 0x94,
        ];
        let outgoing: &[u8] = &[
            0x12, 0x94, 0x43, 0xa9, 0x7f, 0xd4, 0xba, 0x87, 0x38, 0x3b, 0xd6, 0x68, 0xfd, 0x61,
            0x0f, 0x38, 0x71, 0x1c, 0xc8, 0x65, 0xf6, 0x28, 0xbc, 0x02, 0x8b, 0x17, 0xfe, 0x0e,
            0x77, 0xc3, 0xdf, 0xaf, 0xab, 0x4e, 0xec, 0xd0, 0xe9, 0x9f, 0xc2, 0xc8, 0x3d, 0x5c,
            0x73, 0x87, 0x71, 0xd1, 0x07, 0x2e, 0xb0, 0x5a, 0xe5, 0x88, 0x7a, 0xed, 0x3b, 0xfa,
            0x98, 0xd8, 0x60, 0xcd, 0x97, 0xaf, 0x60, 0x5c, 0x91, 0xa4, 0x33, 0x33, 0xe3, 0x79,
            0xf6, 0x18, 0x6f, 0xf0,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_version,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_version).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Pairings pairings
    {
        let incoming_data: &[u8] = &[
            0x62, 0xab, 0xff, 0xf9, 0xd7, 0x02, 0xc2, 0x38, 0x11, 0x28, 0x0b, 0xe9, 0xef, 0xe7,
            0x0b, 0xe9, 0x11, 0x4a, 0x2a, 0x7c, 0x36,
        ];
        let outgoing: &[u8] = &[
            0xd3, 0x00, 0xec, 0x96, 0xdc, 0xde, 0x03, 0x87, 0x82, 0x85, 0x0e, 0x0a, 0x67, 0x8c,
            0x46, 0xdf, 0xc0, 0x9d, 0x7f, 0xc3, 0x98, 0x3b, 0xab, 0x52, 0x34, 0xeb, 0x7c, 0x38,
            0x5b, 0x35, 0x41, 0xae, 0x7f, 0x96, 0x4b, 0x5b, 0x85, 0x17, 0x91, 0x44, 0x3e, 0xdc,
            0xcc, 0xa2, 0xa7, 0x80, 0xbb, 0xf1, 0xb2, 0xae, 0xd7, 0x9e, 0x4a, 0x84, 0xd3, 0x6b,
            0xc8, 0x56, 0x65, 0xce, 0x34, 0x1d, 0xab, 0x20, 0xa5, 0x17, 0x99, 0x78, 0x85, 0x56,
            0x64, 0x28, 0x87, 0x5c,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_pair_pairings,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_pair_pairings).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Service signature on the lightbulb service.
    {
        let incoming_data: &[u8] = &[
            0xef, 0xdd, 0xe0, 0xf7, 0xc8, 0x2a, 0xec, 0x9e, 0xa5, 0xcc, 0x78, 0x68, 0x03, 0x1c,
            0x40, 0x68, 0xc0, 0x8e, 0x47, 0xbb, 0x36,
        ];
        let outgoing: &[u8] = &[
            0x9d, 0xfe, 0x33, 0xf3, 0xb3, 0x4e, 0x91, 0xa1, 0x97, 0x09, 0x19, 0x49, 0xe3, 0x8a,
            0x5a, 0xa7, 0x46, 0x50, 0x4b, 0x05, 0x0e, 0xc4, 0xd2, 0x81, 0x46, 0x9c, 0x84,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_service_signature,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_service_signature).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // service sig again!
    {
        let incoming_data: &[u8] = &[
            0x1f, 0x72, 0x43, 0xdd, 0x38, 0x37, 0xf6, 0xab, 0x2a, 0x5d, 0x11, 0x03, 0xd1, 0xc9,
            0xe5, 0x5a, 0xf5, 0x37, 0xab, 0x93, 0x41,
        ];
        let outgoing: &[u8] = &[
            0xf8, 0x36, 0x5b, 0x0e, 0x79, 0x60, 0x84, 0xed, 0x09, 0x8c, 0xd5, 0x93, 0x3c, 0x5d,
            0x5f, 0x3a, 0xb0, 0x1f, 0x66, 0x2d, 0xe2, 0x90, 0x22, 0x7b, 0xac, 0xd8, 0xd3, 0xc7,
            0xdb, 0xb1, 0xb8, 0xba, 0xba, 0x47, 0xc1, 0x22, 0x84, 0x6f, 0x72, 0x75, 0x3b, 0xba,
            0xc2, 0x18, 0x96, 0x8e, 0xeb, 0xaa, 0xb4, 0x2a, 0x15, 0x3e, 0x88, 0xed, 0x10, 0x81,
            0xcc, 0x8b, 0xce, 0xf6, 0x96, 0xe4, 0x89, 0x24, 0x6b, 0xf0, 0x11, 0xb5, 0x72, 0x17,
            0xdd, 0x4c, 0x98, 0x40,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_service_signature,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_service_signature).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Characteristic signature read on the 'On' characteristic!
    {
        let incoming_data: &[u8] = &[
            0x36, 0x56, 0xec, 0xae, 0xff, 0x04, 0xf0, 0x8d, 0x37, 0x5b, 0x29, 0xd1, 0x1d, 0x4b,
            0x77, 0xf8, 0x17, 0xe4, 0x85, 0x3f, 0x1a,
        ];
        let outgoing: &[u8] = &[
            0xc7, 0xb5, 0x35, 0x28, 0xde, 0x0c, 0xe6, 0x16, 0xa8, 0xac, 0xe8, 0x3f, 0x5c, 0x12,
            0x96, 0xe2, 0x5b, 0xe8, 0xfd, 0x62, 0xe5, 0x9d, 0xed, 0x3b, 0xb6, 0x0c, 0x11, 0x5f,
            0xe9, 0xb2, 0xaa, 0xd1, 0xea, 0x91, 0x88, 0x7f, 0x20, 0x75, 0x49, 0x75, 0x98, 0xde,
            0xa9, 0xe1, 0x63, 0x7c, 0xbe, 0x60, 0x29, 0x31, 0x1d, 0xcc, 0xde, 0xc3, 0xd9, 0x24,
            0x60, 0x6e, 0x0f, 0x92, 0x7d, 0xb3, 0x41, 0xdb, 0x6e, 0x81, 0xa7, 0xc8, 0x82, 0x23,
            0x7c, 0xbf, 0x70, 0x01,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_on,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_lightbulb_on).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Something on the name handle.
    {
        let incoming_data: &[u8] = &[
            0xe1, 0x16, 0x70, 0x52, 0xa7, 0x1e, 0x17, 0x9d, 0x53, 0x90, 0x83, 0xc2, 0x96, 0x6a,
            0x16, 0xa9, 0x4a, 0x56, 0x1d, 0xd4, 0xb4,
        ];
        let outgoing: &[u8] = &[
            0xc0, 0x1f, 0xe4, 0x04, 0x88, 0xb1, 0xcd, 0xa1, 0x36, 0x05, 0x70, 0xb3, 0x81, 0x8f,
            0x8b, 0x31, 0x85, 0x8f, 0x80, 0x20, 0xbc, 0xf2, 0x0a, 0x09, 0xd9, 0x6e, 0x00, 0x4c,
            0xf0, 0xf3, 0x4d, 0x47, 0x8d, 0x85, 0xfe, 0x7a, 0xff, 0xb1, 0xd5, 0x99, 0xe9, 0xc8,
            0xea, 0xde, 0xdd, 0xd4, 0xd2, 0xfb, 0x2c, 0x0f, 0x63, 0x7f, 0x95, 0x75, 0x38, 0x58,
            0x40, 0x74, 0x08, 0x4a, 0xda, 0xbf, 0xe1, 0x98, 0xc5, 0xe8, 0x0f, 0x03, 0x6c, 0xb5,
            0xc1, 0xb1, 0x4f, 0x5b,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_name,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_lightbulb_name).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Now we read the firmware revision string!
    {
        let incoming_data: &[u8] = &[
            0x08, 0x0e, 0xc5, 0xff, 0x16, 0x22, 0x78, 0x24, 0xb6, 0xfc, 0x81, 0x4e, 0xf8, 0x28,
            0x14, 0x67, 0xa8, 0xb1, 0xed, 0x6b, 0xb9,
        ];
        let outgoing: &[u8] = &[
            0x51, 0x1e, 0x94, 0x9a, 0xa4, 0x75, 0x93, 0xaf, 0x60, 0xb4, 0xa6, 0xd3, 0x2c, 0xa4,
            0x2f, 0xf5, 0xca, 0x2a, 0x34, 0xeb, 0x4f, 0x70, 0x0e, 0x39,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_firmware_version,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_firmware_version).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Manufacturer
    {
        let incoming_data: &[u8] = &[
            0x05, 0x76, 0xd3, 0xaf, 0x2f, 0xa0, 0xdd, 0xd1, 0x2c, 0x0b, 0xa8, 0xdd, 0xf2, 0x7a,
            0xe3, 0x0b, 0x53, 0x4e, 0x07, 0xb8, 0x9c,
        ];
        let outgoing: &[u8] = &[
            0x71, 0xea, 0xd2, 0xfb, 0xe8, 0x12, 0xef, 0x4d, 0x7f, 0x86, 0x08, 0x3d, 0x00, 0xe7,
            0xec, 0xe3, 0x66, 0x33, 0x18, 0xd8, 0x0e, 0x37, 0xd4, 0x37, 0x29, 0x50, 0x11,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_manufacturer,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_manufacturer).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Model
    {
        let incoming_data: &[u8] = &[
            0xf8, 0xbd, 0xaf, 0x7d, 0x21, 0xbd, 0xa1, 0x50, 0x1f, 0x3c, 0x78, 0xe7, 0x86, 0x72,
            0x30, 0xf3, 0x07, 0x8f, 0x6c, 0x91, 0xd9,
        ];
        let outgoing: &[u8] = &[
            0xc7, 0xfb, 0xd3, 0x79, 0x6c, 0x67, 0x9c, 0x6c, 0x59, 0xc0, 0x55, 0x75, 0x46, 0x4c,
            0x26, 0xf3, 0xce, 0x8f, 0xe8, 0x65, 0x2f, 0xc6, 0x58, 0x84, 0x9a, 0x21, 0x47, 0x14,
            0xf5, 0xa2, 0x51, 0x90, 0x0e, 0x81, 0x51,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_model,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_model).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Serial number
    {
        let incoming_data: &[u8] = &[
            0x56, 0xac, 0x55, 0x8e, 0xf6, 0x0f, 0x3a, 0xbd, 0x2c, 0x8a, 0xf5, 0xc4, 0x47, 0x0a,
            0x13, 0x1c, 0x72, 0x38, 0x7f, 0xd0, 0x71,
        ];
        let outgoing: &[u8] = &[
            0x51, 0x47, 0x7e, 0x71, 0x5d, 0x5d, 0xff, 0xb4, 0xf6, 0x05, 0x60, 0xbc, 0xce, 0x95,
            0x70, 0xea, 0x91, 0xd9, 0x93, 0x62, 0xda, 0xdb, 0x4f, 0xd0, 0x7f, 0x47, 0x62, 0x82,
            0x2c, 0xfe, 0x64, 0x79, 0x10, 0xf9, 0xf3,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_model,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_model).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Name
    {
        let incoming_data: &[u8] = &[
            0x6b, 0x2e, 0x57, 0x9b, 0xb2, 0xa6, 0x59, 0xcc, 0xab, 0xee, 0x34, 0x11, 0x71, 0xb7,
            0xe3, 0x40, 0x0a, 0xb6, 0xc9, 0x70, 0x48,
        ];
        let outgoing: &[u8] = &[
            0xb4, 0x39, 0x0e, 0x0f, 0x87, 0x16, 0x2b, 0xfd, 0x43, 0xaf, 0xc8, 0xc0, 0x01, 0x75,
            0x0f, 0x78, 0xb4, 0x9b, 0x78, 0xda, 0xcd, 0x49, 0x72, 0xa8, 0x70, 0x33, 0xbd, 0xc4,
            0x91, 0xd5, 0xfd, 0x2c, 0x59, 0x25, 0x8b, 0xfb, 0xd9, 0x6a,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_model,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_model).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Lightbulb name!
    {
        let incoming_data: &[u8] = &[
            0xc5, 0x3b, 0x1c, 0xbf, 0xab, 0x35, 0x4b, 0x41, 0x58, 0x8f, 0xdc, 0xab, 0x9c, 0xd6,
            0xef, 0xa7, 0xa3, 0x0b, 0xe5, 0x26, 0xf6,
        ];
        let outgoing: &[u8] = &[
            0x1b, 0x7e, 0x60, 0x55, 0x10, 0x0e, 0x09, 0x80, 0x26, 0x51, 0x7b, 0xce, 0x35, 0x11,
            0x3c, 0xc8, 0x0d, 0x2f, 0x5b, 0xb0, 0x87, 0x91, 0x78, 0x7d, 0x84, 0x6c, 0xd3, 0x76,
            0xb5, 0x24, 0x78, 0x5a, 0xdb,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_name,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_lightbulb_name).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Write to service signature -> Protocol Configuration!
    {
        let incoming_data: &[u8] = &[
            0xdb, 0x5c, 0xf3, 0x57, 0x88, 0x99, 0x53, 0xab, 0xc5, 0xa1, 0x7d, 0xa1, 0x45, 0xdd,
            0x70, 0x09, 0x4f, 0x5b, 0x9a, 0xa5, 0xbf, 0xa3, 0x2e, 0x3b, 0x6d, 0x54, 0x2f,
        ];
        let outgoing: &[u8] = &[
            0x74, 0x1a, 0x67, 0x4a, 0x9f, 0x3b, 0xe7, 0x03, 0xac, 0xb2, 0xda, 0x38, 0x42, 0x2d,
            0x01, 0x9f, 0xf3, 0x66, 0x7a, 0x5b, 0x14, 0x63, 0xf0, 0xc6, 0x30, 0x48, 0x8f, 0xa7,
            0xcb, 0x7e, 0xa5, 0x8b, 0xfb, 0xb7, 0xa8, 0xd9, 0xed, 0xc8, 0x25, 0x2d, 0xe1, 0x31,
            0xd3, 0xd4, 0xc3, 0xf3, 0xb0, 0x4f, 0x9e, 0x2d, 0xb0, 0x1f, 0x6a, 0xec, 0x29, 0x08,
            0x88, 0xdb, 0x08, 0xc9, 0xbb, 0x16, 0x2c, 0x9a, 0xd2, 0x0a, 0x5b, 0x08, 0x66, 0x8a,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_service_signature,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_service_signature).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Write request to name
    {
        let incoming_data: &[u8] = &[
            0x5e, 0x7b, 0xa0, 0x2b, 0x34, 0xcf, 0x30, 0xeb, 0xa5, 0xab, 0x30, 0xd9, 0x1d, 0x3e,
            0x75, 0xa7, 0xef, 0xbb, 0xf3, 0x22, 0x6b,
        ];
        let outgoing: &[u8] = &[
            0xb9, 0x71, 0xfc, 0x5a, 0x41, 0xe5, 0xc8, 0xd0, 0x57, 0x51, 0x0a, 0x9c, 0x4b, 0x3d,
            0x05, 0x47, 0x21, 0xf7, 0xd9, 0xa7, 0xa9, 0xc2, 0xcd, 0x2e, 0xd3, 0xb6, 0x10, 0x45,
            0x9c, 0x22, 0x12, 0x00, 0xd8, 0xf4, 0x62, 0x64, 0xb3, 0xc6,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_name,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_lightbulb_name).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Write request to firmware revision.
    {
        let incoming_data: &[u8] = &[
            0x21, 0x23, 0x0f, 0xbd, 0x0b, 0xf6, 0x1d, 0xef, 0x31, 0xe1, 0xfb, 0xaa, 0x09, 0x48,
            0xd5, 0xb2, 0x1c, 0x6e, 0x89, 0x51, 0xc9,
        ];
        let outgoing: &[u8] = &[
            0x00, 0xb3, 0x6c, 0x60, 0x8e, 0x80, 0x80, 0x5c, 0x75, 0x03, 0xb5, 0xdb, 0x85, 0x54,
            0x96, 0xc2, 0x70, 0x2e, 0xcf, 0xdc, 0x0c, 0xef, 0x75, 0xdc,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_firmware_version,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_firmware_version).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        let _ = outgoing;
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Write to name... three times... oh, different handles.
    {
        let tests = [
            ExchangeTest {
                handle: handle_lightbulb_name,
                incoming: &[
                    0xa0, 0x04, 0x3c, 0x53, 0xab, 0xfb, 0xcd, 0x12, 0xaa, 0x11, 0x9b, 0xc7, 0x7c,
                    0xf1, 0xdf, 0x26, 0x9b, 0x13, 0x51, 0x71, 0x6c,
                ],
                outgoing: &[
                    0xbb, 0xe5, 0x86, 0x80, 0x08, 0xea, 0xfe, 0xbf, 0xda, 0x2a, 0xf5, 0xbd, 0x76,
                    0x1f, 0x63, 0x63, 0x0a, 0xc7, 0x56, 0x27, 0x1c, 0x2f, 0x37, 0x9a, 0xa5, 0xca,
                    0x36, 0x01, 0xfd, 0xa5, 0x9e, 0x2a, 0xda,
                ],
            },
            ExchangeTest {
                handle: handle_lightbulb_name,
                incoming: &[
                    0xf8, 0xf7, 0x74, 0x51, 0xd9, 0x19, 0x82, 0x13, 0x6f, 0x74, 0x93, 0x6a, 0xb4,
                    0x6d, 0xb4, 0xe2, 0x52, 0x97, 0x2d, 0xe9, 0xcd,
                ],
                outgoing: &[
                    0x75, 0x72, 0xd3, 0x03, 0x1c, 0x1d, 0x46, 0x1b, 0xa4, 0xba, 0x08, 0x11, 0x20,
                    0xb8, 0x56, 0xb5, 0xac, 0x44, 0xb5, 0xf1, 0x30, 0xbc, 0xc9, 0xfc, 0xd9, 0x60,
                    0xbc, 0x59, 0xcb, 0x78, 0xb4, 0x49, 0x7b,
                ],
            },
            ExchangeTest {
                handle: handle_name,
                incoming: &[
                    0x84, 0x32, 0x35, 0x2a, 0x17, 0xa9, 0x03, 0x54, 0x56, 0xf8, 0x41, 0x3f, 0x30,
                    0x83, 0x35, 0x4e, 0xd7, 0x52, 0x62, 0x3e, 0x12,
                ],
                outgoing: &[
                    0x97, 0x31, 0x55, 0x88, 0xbf, 0x18, 0x00, 0x0c, 0x60, 0x08, 0x56, 0x77, 0xa9,
                    0x4f, 0x8c, 0xc2, 0x57, 0x83, 0x51, 0x7e, 0x9f, 0x0e, 0x0d, 0x32, 0xd8, 0x3c,
                    0x80, 0xb8, 0x48, 0x33, 0xa8, 0x6c, 0x9e, 0x90, 0x72, 0x33, 0xd3, 0x7e,
                ],
            },
        ];
        for ExchangeTest {
            incoming,
            outgoing,
            handle,
        } in tests
        {
            ctx.handle_write_incoming_test(&hap, &mut support, &mut accessory, incoming, handle)
                .await?;
            let resp = ctx.handle_read_outgoing(handle).await?;
            let resp_buffer = resp.expect("expecting a outgoing response");
            info!("outgoing: {:02x?}", &*resp_buffer);
            assert_eq!(&*resp_buffer, outgoing);
        }

        // And then, a write to on.
        {
            let incoming_data: &[u8] = &[
                0xec, 0x4b, 0x97, 0xbd, 0x2f, 0xcf, 0x72, 0x7f, 0x2f, 0xf9, 0x69, 0x94, 0x64, 0x8b,
                0x55, 0x75, 0x58, 0xb1, 0xed, 0xaf, 0x75, 0x7d, 0xd5, 0x82, 0x16, 0xbc, 0xb5, 0x52,
                0x4e, 0x78,
            ];
            let outgoing: &[u8] = &[
                0xcd, 0xa9, 0x7e, 0x31, 0x07, 0xb8, 0x08, 0x94, 0xea, 0xd6, 0x86, 0x8b, 0x13, 0x60,
                0x17, 0xc5, 0xe1, 0x6c, 0xc7, 0x8e, 0x7a, 0xbc, 0x54, 0xdf, 0xfb, 0xc3, 0x9d, 0xe3,
            ];
            ctx.handle_write_incoming_test(
                &hap,
                &mut support,
                &mut accessory,
                incoming_data,
                handle_lightbulb_on,
            )
            .await?;
            let resp = ctx.handle_read_outgoing(handle_lightbulb_on).await?;
            let resp_buffer = resp.expect("expecting a outgoing response");
            info!("outgoing: {:02x?}", &*resp_buffer);
            let _ = outgoing;
            assert_eq!(&*resp_buffer, outgoing);
        }

        // Another write on on the lightbulb!
        // 0x62, 0x23, 0x31, 0x37, 0x2f, 0xf0, 0x06, 0x49, 0xaf, 0xcb, 0x62, 0x07, 0xdb, 0x24, 0xe1, 0x6f, 0x41, 0x9d, 0x3e, 0xe0, 0x1e
        {
            struct LightBulbOnTest {
                incoming: &'static [u8],
                outgoing: &'static [u8],
            }
            let test = [
                LightBulbOnTest {
                    incoming: &[
                        0x62, 0x23, 0x31, 0x37, 0x2f, 0xf0, 0x06, 0x49, 0xaf, 0xcb, 0x62, 0x07,
                        0xdb, 0x24, 0xe1, 0x6f, 0x41, 0x9d, 0x3e, 0xe0, 0x1e,
                    ],
                    outgoing: &[
                        0x4a, 0x16, 0x2b, 0x72, 0x80, 0x44, 0x98, 0x00, 0x04, 0x01, 0x24, 0xc8,
                        0x5a, 0xff, 0xec, 0x83, 0xa6, 0xf5, 0xe3, 0xa3, 0xc5, 0x73, 0x71, 0xb1,
                    ],
                },
                LightBulbOnTest {
                    incoming: &[
                        0xd1, 0xdc, 0x5e, 0x02, 0x11, 0x6d, 0x75, 0x31, 0xa7, 0x51, 0x4d, 0x42,
                        0xac, 0x61, 0x42, 0x3a, 0x71, 0xb8, 0x16, 0x93, 0x63,
                    ],
                    outgoing: &[
                        0x53, 0x82, 0x18, 0xca, 0xf4, 0x7f, 0x5f, 0xb0, 0x79, 0x37, 0x45, 0x63,
                        0xcf, 0xca, 0xb5, 0x69, 0x9a, 0x4e, 0x6c, 0x3f, 0x5e, 0x28, 0x96, 0x54,
                    ],
                },
            ];
            for LightBulbOnTest { incoming, outgoing } in test {
                ctx.handle_write_incoming_test(
                    &hap,
                    &mut support,
                    &mut accessory,
                    incoming,
                    handle_lightbulb_on,
                )
                .await?;
                let resp = ctx.handle_read_outgoing(handle_lightbulb_on).await?;
                let resp_buffer = resp.expect("expecting a outgoing response");
                info!("outgoing: {:02x?}", &*resp_buffer);
                assert_eq!(&*resp_buffer, outgoing);
            }
        }

        // And now we go into pair verify yet again!
        // Feed the device the necessary random.
        support.add_random(&[0x4b, 0xff, 0x03, 0x1d, 0x7d, 0x97, 0x5f, 0x01]);
        {
            let incoming_data: &[u8] = &[
                0x00, 0x02, 0x61, 0x23, 0x00, 0x49, 0x00, 0x01, 0x44, 0x06, 0x01, 0x01, 0x00, 0x01,
                0x06, 0x0e, 0x08, 0x19, 0xaa, 0x62, 0xff, 0xbe, 0xf3, 0x84, 0x94, 0x05, 0x10, 0x3f,
                0x50, 0x1c, 0xa6, 0x65, 0xe4, 0xa7, 0x45, 0x33, 0xf9, 0x29, 0x14, 0x5a, 0xe3, 0x52,
                0x2e, 0x03, 0x20, 0xfe, 0x6c, 0x05, 0xc7, 0x34, 0xa5, 0xf0, 0x04, 0x59, 0x0e, 0xa5,
                0x8e, 0x5c, 0x9f, 0x6c, 0x31, 0xd6, 0x36, 0xc1, 0xd4, 0x7b, 0xd5, 0xc5, 0x31, 0x6d,
                0x68, 0xac, 0x3f, 0x5d, 0x87, 0x79, 0x28, 0x09, 0x01, 0x01,
            ];
            let outgoing: &[u8] = &[
                0x02, 0x61, 0x00, 0x24, 0x00, 0x01, 0x22, 0x06, 0x01, 0x02, 0x00, 0x01, 0x06, 0x0e,
                0x08, 0x4b, 0xff, 0x03, 0x1d, 0x7d, 0x97, 0x5f, 0x01, 0x05, 0x10, 0x7a, 0x38, 0x77,
                0x82, 0x85, 0x2a, 0xdf, 0xc4, 0x38, 0x40, 0x7e, 0x49, 0x49, 0x0d, 0x27, 0x98,
            ];
            ctx.handle_write_incoming_test(
                &hap,
                &mut support,
                &mut accessory,
                incoming_data,
                handle_pair_verify,
            )
            .await?;
            let resp = ctx.handle_read_outgoing(handle_pair_verify).await?;
            let resp_buffer = resp.expect("expecting a outgoing response");
            info!("outgoing: {:02x?}", &*resp_buffer);
            let _ = outgoing;
            assert_eq!(&*resp_buffer, outgoing);
        }
    }

    // Next we have an write to the ON characteristic, this seems to be the real first toggle?
    {
        let incoming_data: &[u8] = &[
            0x72, 0xb3, 0x58, 0x33, 0x0f, 0xc7, 0xb2, 0x16, 0x74, 0xbe, 0x51, 0xcf, 0x82, 0xa4,
            0x1b, 0x1b, 0x14, 0x96, 0x15, 0x2f, 0x4a, 0x0d, 0x7a, 0x88, 0x9a, 0x57,
        ];
        let outgoing: &[u8] = &[
            0x57, 0xc9, 0x4a, 0xf0, 0x9f, 0x5a, 0x32, 0xe3, 0xf1, 0x41, 0xc8, 0x50, 0x4a, 0x0b,
            0x86, 0x06, 0x9d, 0xb7, 0x98,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_on,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_lightbulb_on).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
        assert_eq!(support.global_state_number, 2);
    }

    {
        let incoming_data: &[u8] = &[
            0x66, 0xf5, 0x79, 0xc9, 0x36, 0xf0, 0x6d, 0xe7, 0x44, 0xc9, 0x9e, 0x6c, 0xfa, 0xa4,
            0x9f, 0xd9, 0x1e, 0x88, 0xea, 0x09, 0xdd, 0x9c, 0x02, 0x89, 0x61, 0xb6,
        ];
        let outgoing: &[u8] = &[
            0x30, 0xc7, 0xd8, 0xe2, 0x96, 0x4e, 0xef, 0x42, 0xdd, 0x70, 0xf9, 0x0e, 0xe0, 0x12,
            0xb1, 0xd4, 0x23, 0x2b, 0x60,
        ];
        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            incoming_data,
            handle_lightbulb_on,
        )
        .await?;
        let resp = ctx.handle_read_outgoing(handle_lightbulb_on).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
        assert_eq!(support.global_state_number, 3);
    }

    // This TimedWrite payload is from 2025_08_22_1430_homekitadk_pair_disconnect_connect_toggle.txt
    {
        let mut copied_c_to_a = {
            let v = ctx.pair_ctx.borrow();
            (*v).session.c_to_a
        };
        let mut copied_a_to_c = {
            let v = ctx.pair_ctx.borrow();
            (*v).session.a_to_c
        };
        let timed_write_plain = [
            0x00, 0x04, 0x26, 0x25, 0x00, 0x34, 0x00, 0x01, 0x2c, 0x00, 0x01, 0x04, 0x06, 0x01,
            0x01, 0x01, 0x24, 0x37, 0x37, 0x37, 0x35, 0x35, 0x44, 0x44, 0x35, 0x2d, 0x37, 0x32,
            0x32, 0x33, 0x2d, 0x34, 0x41, 0x33, 0x42, 0x2d, 0x38, 0x37, 0x44, 0x32, 0x2d, 0x43,
            0x32, 0x34, 0x41, 0x32, 0x34, 0x46, 0x34, 0x30, 0x36, 0x39, 0x35, 0x08, 0x01, 0x19,
            0x09, 0x01, 0x01,
        ];
        info!("timed_write_plain len: {}", timed_write_plain.len());
        let mut timed_write_encr =
            vec![0; timed_write_plain.len() + crate::crypto::aead::CHACHA20_POLY1305_KEY_BYTES];
        timed_write_encr[0..timed_write_plain.len()].copy_from_slice(&timed_write_plain);
        let payload = copied_c_to_a
            .encrypt(&mut timed_write_encr, timed_write_plain.len())
            .unwrap();
        info!("encrypted timed write: {:?} len {}", payload, payload.len());

        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            payload,
            handle_pair_pairings,
        )
        .await?;

        let outgoing_plain: &[u8] = &[0x02u8, 0x26, 0x00];

        info!("timed_write_plain len: {}", outgoing_plain.len());
        let mut outgoing_encr =
            vec![0; outgoing_plain.len() + crate::crypto::aead::CHACHA20_POLY1305_KEY_BYTES];
        outgoing_encr[0..outgoing_plain.len()].copy_from_slice(&outgoing_plain);
        let outgoing = copied_a_to_c
            .encrypt(&mut outgoing_encr, outgoing_plain.len())
            .unwrap();
        info!("outgoing_encr: {:?} len {}", payload, payload.len());

        let resp = ctx.handle_read_outgoing(handle_pair_pairings).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }

    // Next up is CharacteristicExecuteWrite
    // This CharacteristicExecuteWrite payload is from 2025_08_22_1430_homekitadk_pair_disconnect_connect_toggle.txt
    {
        let mut copied_c_to_a = {
            let v = ctx.pair_ctx.borrow();
            (*v).session.c_to_a
        };
        let mut copied_a_to_c = {
            let v = ctx.pair_ctx.borrow();
            (*v).session.a_to_c
        };
        let execute_write_plain = [0x00, 0x05, 0xcc, 0x25, 0x00];
        info!("timed_write_plain len: {}", execute_write_plain.len());
        let mut execute_write_encr =
            vec![0; execute_write_plain.len() + crate::crypto::aead::CHACHA20_POLY1305_KEY_BYTES];
        execute_write_encr[0..execute_write_plain.len()].copy_from_slice(&execute_write_plain);
        let payload = copied_c_to_a
            .encrypt(&mut execute_write_encr, execute_write_plain.len())
            .unwrap();
        info!("encrypted exec write: {:?} len {}", payload, payload.len());

        ctx.handle_write_incoming_test(
            &hap,
            &mut support,
            &mut accessory,
            payload,
            handle_pair_pairings,
        )
        .await?;

        // let outgoing_plain: &[u8] = &[0x01, 0x03, 0x06, 0x01, 0x02];
        let outgoing_plain: &[u8] = &[0x02, 0xcc, 0x00, 0x05, 0x00, 0x01, 0x03, 0x06, 0x01, 0x02];

        info!("outgoing len: {}", outgoing_plain.len());
        let mut outgoing_encr =
            vec![0; outgoing_plain.len() + crate::crypto::aead::CHACHA20_POLY1305_KEY_BYTES];
        outgoing_encr[0..outgoing_plain.len()].copy_from_slice(&outgoing_plain);
        let outgoing = copied_a_to_c
            .encrypt(&mut outgoing_encr, outgoing_plain.len())
            .unwrap();
        info!("outgoing_encr: {:?} len {}", payload, payload.len());

        let resp = ctx.handle_read_outgoing(handle_pair_pairings).await?;
        let resp_buffer = resp.expect("expecting a outgoing response");
        info!("outgoing: {:02x?}", &*resp_buffer);
        assert_eq!(&*resp_buffer, outgoing);
    }
    Ok(())
}
